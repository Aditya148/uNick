{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","rel","href","integrity","crossorigin","id","src","class","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,wJCiH5BC,MA3Gf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,0BAAMC,IAAI,aAAaC,KAAK,wEAC1BC,UAAU,0EACVC,YAAY,cAMV,yBAAKC,GAAG,QAGpB,6BACE,4BACE,yBAAKC,IAAI,KACT,4BACE,yBAAKC,MAAM,aACT,yBAAKA,MAAM,QACT,yBAAKA,MAAM,eAEb,yBAAKA,MAAM,YAGf,4BACE,yBAAKA,MAAM,cACT,yBAAKA,MAAM,QACT,yBAAKA,MAAM,SACX,yBAAKA,MAAM,aAIjB,4BACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,UACX,yBAAKA,MAAM,UACX,yBAAKA,MAAM,UACX,yBAAKA,MAAM,YAGf,4BACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,kBAOrB,iCACE,4BAAI,uDAIM,6DAEA,yBAAKA,MAAM,aAAaC,QAAQ,eAChC,4BAAI,yCACF,yBAAKD,MAAM,SACT,yBAAKF,GAAG,OACN,0BAAME,MAAM,wBACZ,0BAAMA,MAAM,2BAKlB,yBAAKF,GAAG,eACZ,8BAAM,gCACN,yBAAKE,MAAM,QACT,uBAAGL,KAAK,KAAI,+BACZ,uBAAGA,KAAK,KAAI,+BACZ,uBAAGA,KAAK,KAAI,+BACZ,uBAAGA,KAAK,KAAI,+BACZ,uBAAGA,KAAK,KAAI,qCCtEFO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3386d74a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './script.js';\nimport './sidenav.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n          crossorigin=\"anonymous\" />\n          {/* <html>\n            <head>\n              <title>Hola</title>\n            </head>\n            <body> */}\n            <div id=\"body\">\n            {/* sideNav */}\n            \n<nav>\n  <ul>\n    <img src=\"\"></img>\n    <li>\n      <div class=\"home-icon\">\n        <div class=\"roof\">\n          <div class=\"roof-edge\"></div>\n        </div>\n        <div class=\"front\"></div>\n      </div>\n    </li>\n    <li>\n      <div class=\"about-icon\">\n        <div class=\"head\">\n          <div class=\"eyes\"></div>\n          <div class=\"beard\"></div>\n        </div>\n      </div>\n    </li>\n    <li>\n      <div class=\"work-icon\">\n        <div class=\"paper\"></div>\n        <div class=\"lines\"></div>\n        <div class=\"lines\"></div>\n        <div class=\"lines\"></div>\n      </div>\n    </li>\n    <li>\n      <div class=\"mail-icon\">\n        <div class=\"mail-base\">\n          <div class=\"mail-top\"></div>\n        </div>\n      </div>\n    </li>\n  </ul>\n</nav>\n\n<section>\n  <h1><strong>Hola! Get Started</strong></h1>\n</section>\n            \n\n            <h2>Unleash the Power within you!</h2>\n\n            <div class=\"center-con\" onClick=\"scrollWin()\">\n            <h3><strong>Fall</strong></h3>\n              <div class=\"round\">\n                <div id=\"cta\">\n                  <span class=\"arrow primera next \"></span>\n                  <span class=\"arrow segunda next \"></span>\n                </div>\n              </div>\n            </div>\n            \n            <div id=\"circularNav\">\n        <span><span></span></span>\n        <div class=\"wrap\">\n          <a href=\"#\"><div></div></a>\n          <a href=\"#\"><div></div></a>\n          <a href=\"#\"><div></div></a>\n          <a href=\"#\"><div></div></a>\n          <a href=\"#\"><div></div></a>\n        </div>\n        </div>\n        {/* <nav className=\"navbar navbar-default\">\n          <ul>\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">FAQs</a></li>\n            <li><a href=\"#\">About</a></li>\n          </ul>\n        </nav> */}\n        \n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        {/* </body>\n        </html> */}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}